/** * @author Vishvesh Deshmukh  * Created : 2nd February, 2013  * Project : Scrbl */var pageX = [], 	pageY = [], 	timeArray = [], 	lastPoint, 	click, 	lastClick;	/*ua = navigator.userAgent,	browser = {    iPad: /iPad/.test(ua),    iPhone: /iPhone/.test(ua),    Android4: /Android 4/.test(ua)};*/function Point(x, y, z) {	if (x === undefined) {		throw new ReferenceError('At least one dimension is required');	}	if (typeof x != 'number') {		throw new TypeError("Variable 'x' is nonnumerical");	} else if (y !== undefined && typeof y != 'number') {		throw new TypeError("Variable 'y' is nonnumerical");	} else if (z !== undefined && typeof z != 'number') {		throw new TypeError("Variable 'z' is nonnumerical");	}	this.x = x;	this.y = y;	this.z = z;}Point.prototype.add = function(point) {	if (point instanceof Point) {		switch (this.numberOfDimensions) {		case 1:			switch (point.numberOfDimensions) {			case 1:				return new Point(this.x + point.x);			case 2:				return new Point(this.x + point.x, point.y);			case 3:				return new Point(this.x + point.x, point.y, point.z);			default:				throw new RangeError(						"The variable 'point' has an unsupported number of dimensions");			}			break;		case 2:			switch (point.numberOfDimensions) {			case 1:				return new Point(this.x + point.x, this.y);			case 2:				return new Point(this.x + point.x, this.y + point.y);			case 3:				return new Point(this.x + point.x, this.y + point.y, point.z);			default:				throw new RangeError(						"The variable 'point' has an unsupported number of dimensions");			}			break;		case 3:			switch (point.numberOfDimensions) {			case 1:				return new Point(this.x + point.x, this.y, this.z);			case 2:				return new Point(this.x + point.x, this.y + point.y, this.z);			case 3:				return new Point(this.x + point.x, this.y + point.y, this.z						+ point.z);			default:				throw new RangeError(						"The variable 'point' has an unsupported number of dimensions");			}			break;		default:			throw new RangeError(					'The calling object has an unsupported number of dimensions');		}	}	throw new TypeError("Variable 'point' is not a point");};Point.prototype.__defineGetter__('numberOfDimensions', function() {	if (this.z !== undefined) {		return 3;	} else if (this.y !== undefined) {		return 2;	}	return 1;});Point.prototype.is1D = function() {	return this.y === undefined && this.z === undefined;};Point.prototype.is2D = function() {	return this.y !== undefined && this.z === undefined;};Point.prototype.is3D = function() {	return this.z !== undefined;};Point.prototype.multiplyMagnitude = function(number) {	if (typeof number != 'number') {		throw new TypeError("Variable 'number' is nonnumerical");	}	if (this.z !== undefined) {		return new Point(this.x * number, this.y * number, this.z * number);	} else if (this.y !== undefined) {		return new Point(this.x * number, this.y * number);	}	return new Point(this.x * number);};$(document).ready(	function() {		var message = "";		function clickIE() {			if (document.all) {				(message);				return false;			}		}	function clickNS(e) {		if (document.layers || (document.getElementById && !document.all)) {			if (e.which == 2 || e.which == 3) {				(message);				return false;			}		}	}	if (document.layers) {		document.captureEvents(Event.MOUSEDOWN);		document.onmousedown = clickNS;	} else {		document.onmouseup = clickNS;		document.oncontextmenu = clickIE;	}	document.oncontextmenu = new Function("return false");	var context = document.getElementById('canvas').getContext('2d');	var offset = $('#canvas').offset();	context.lineWidth = 1;	var container = $('#container');	// container.draggable();	/** **** For Testing on Browsers with a CLICK EVENT **** * */	$("#canvas").on('mousedown',function(e) {		e.preventDefault();				pageX.push(e.pageX);		pageY.push(e.pageY);				lastClick = 0;				timeArray.push(lastClick);			$("#canvas").bind('mousemove',function(event) {		// e.preventDefault();		var point = new Point(event.pageX - offset.left, event.pageY - offset.top);		if (lastPoint !== undefined && lastPoint !== null) {			context.beginPath();			context.moveTo(lastPoint.x, lastPoint.y);			context.lineTo(point.x, point.y);			context.stroke();		}		lastPoint = point;		var date = new Date();		click = date.getTime();		var secondClick = click - lastClick;		console.log("Time from 1st px to 2nd : " + secondClick);				timeArray.push(secondClick);			lastClick = click;				pageX.push(event.pageX);		pageY.push(event.pageY);		});	});	$("#canvas").on('mouseup', function() {		lastPoint = null;		// clearInterval(this.varName);		$("#canvas").unbind('mousemove');	});	document.getElementById('canvas').addEventListener('touchstart', function() {		lastClick = 0;		timeArray.push(lastClick);	}, false);	document.getElementById('canvas').addEventListener('touchmove', function(event) {		event.preventDefault();		var touch = event.touches[0];		var point = new Point(touch.pageX - offset.left, touch.pageY - offset.top);		if (lastPoint !== undefined && lastPoint !== null) {			context.beginPath();			context.moveTo(lastPoint.x, lastPoint.y);			context.lineTo(point.x, point.y);			context.stroke();		}		lastPoint = point;		var date = new Date();		click = date.getTime();		var secondClick = click - lastClick;		console.log("Time from 1st px to 2nd : "+ secondClick);		timeArray.push(secondClick);		lastClick = click;		pageX.push(touch.pageX);		pageY.push(touch.pageY);	}, false);	document.getElementById('canvas').addEventListener('touchend', function() {				lastPoint = null;			}, false);		});function writeToExcel() {	console.log("pageX : " + JSON.stringify(pageX));	console.log("pageY : " + JSON.stringify(pageY));	console.log("TimeArray : " + JSON.stringify(timeArray));		var clientIp;	if(typeof client !=='undefined')		clientIp = client;	else		clientIp = null;	console.log("Client : "+clientIp);		alert("Done Scribbling?");	  $.ajax({ 	  url: '/Scrbl/writeValues', 	  type: 'POST', 	  data: {pageX:JSON.stringify(pageX), pageY: JSON.stringify(pageY), timeArray: JSON.stringify(timeArray), client: clientIp}, 	  success: function(data){		  //$('#ajaxResponse').html(data); 	  }   }); }function clearScreen() {	var canvas = document.getElementById('canvas');	var context = canvas.getContext("2d");	context.clearRect(0, 0, context.canvas.width, context.canvas.height);	pageX.length = 0;	pageY.length = 0;	timeArray.length = 0;	// context.clearRect(0, 0, canvas.width, canvas.height);}var ua = navigator.userAgent,browser = {    iPad: /iPad/.test(ua),    iPhone: /iPhone/.test(ua),    Android4: /Android 4/.test(ua)};var a = navigator.userAgent || navigator.vendor || window.opera;if (/android.+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|meego.+mobile|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i		.test(a)		|| /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i				.test(a.substr(0, 4))) {	mobile = true;} else {	mobile = false;}console.log(mobile);//document.write(mobile);